openapi: 3.0.0
info:
  title: 'Product Service API'
  version: 0.1.0
servers:
  -
    url: 'http://localhost:8080'
    description: local
paths:
  /api/v2/product:
    get:
      tags:
        - Product
      description: 'Get list of product'
      operationId: 71a054629031f7bd8cbbdb76b578642a
      parameters:
        -
          name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
        -
          name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
        -
          name: search
          in: query
          description: search
          required: false
          schema:
            type: string
        -
          name: isDesc
          in: query
          description: isDesc
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'Product index method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: boolean }
                  data: { properties: { list: { type: array, items: { properties: { p_key: { type: integer, example: '1' }, name: { type: string, example: 'Awesome Wool Knife' }, price: { type: integer, example: '846' }, amount: { type: integer, example: '190' }, createdAt: { type: string, example: '2023-02-06 05:52:20' }, updatedAt: { type: string, example: '2023-02-08 09:37:44' } }, type: object } }, dataCount: { type: integer, example: '20' } }, type: object }
                  msg: { type: string, example: 'Product index method successful.' }
                type: object
        '404':
          description: 'Product data not found'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '404', type: string, example: '404' }
                  error: { description: '404', type: string, example: '404' }
                  messages: { properties: { error: { description: 'Product data not found', type: string, example: 'Product data not found' } }, type: object }
                type: object
    post:
      tags:
        - Product
      description: 'Create product.'
      operationId: 757ae20086110042c9741b094ce89999
      requestBody:
        description: 'Request body'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Mediocre Silk Shoes'
                price:
                  type: integer
                  example: '617'
                amount:
                  type: integer
                  example: '266'
              type: object
      responses:
        '200':
          description: 'Product show method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                  data: { type: integer, example: '22' }
                  msg: { type: string, example: 'Product show method successful.' }
                type: object
        '404':
          description: 'Incoming data error'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '400', type: string, example: '404' }
                  error: { description: '400', type: string, example: '404' }
                  messages: { properties: { error: { description: 'Incoming data error', type: string, example: 'Incoming data error' } }, type: object }
                type: object
        '400':
          description: 'The product create failed, please try again.'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '404', type: string, example: '400' }
                  error: { description: '404', type: string, example: '400' }
                  messages: { properties: { error: { description: 'The product create failed, please try again.', type: string, example: 'The product create failed, please try again.' } }, type: object }
                type: object
  '/api/v2/product/{p_key}':
    get:
      tags:
        - Product
      description: 'Get list of product'
      operationId: 10c17f1852203ea7ddf1615860d0b2d8
      parameters:
        -
          name: p_key
          in: path
          description: p_key
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Product show method successful.'
          content:
            application/json:
              schema:
                properties:
                  data: { properties: { p_key: { type: integer, example: '2' }, name: { type: string, example: 'Mediocre Silk Shoes' }, price: { type: integer, example: '617' }, amount: { type: integer, example: '266' }, createdAt: { type: integer, example: '2023-01-26 10:31:50' }, updatedAt: { type: integer, example: '2023-02-08 09:37:44' } }, type: object }
                  msg: { type: string, example: 'Product show method successful.' }
                type: object
        '400':
          description: 'The Product key is required'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '400', type: string, example: '400' }
                  error: { description: '400', type: string, example: '400' }
                  messages: { properties: { error: { description: 'The Product key is required', type: string, example: 'The Product key is required' } }, type: object }
                type: object
        '404':
          description: 'Product data not found'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '404', type: string, example: '404' }
                  error: { description: '404', type: string, example: '404' }
                  messages: { properties: { error: { description: 'Product data not found', type: string, example: 'Product data not found' } }, type: object }
                type: object
    put:
      tags:
        - Product
      description: 'Update someone product by p_key.'
      operationId: de7d654602766011bb2a4c22ef147f97
      parameters:
        -
          name: p_key
          in: path
          description: p_key
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Request body'
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: 'Mediocre Silk Shoes'
                price:
                  type: integer
                  example: '617'
              type: object
      responses:
        '200':
          description: 'Product show method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                  msg: { type: string, example: 'update method successful.' }
                type: object
        '404':
          description: 'Incoming data error'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'Incoming data error'
                  value: { status: '404', error: '404', messages: { error: 'Incoming data error' } }
                string2:
                  summary: 'This product not found'
                  value: { status: '404', error: '404', messages: { error: 'This product not found' } }
        '400':
          description: 'The product create failed, please try again.'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'The Product key is required'
                  value: { status: '400', error: '400', messages: { error: 'The Product key is required' } }
                string2:
                  summary: 'update method fail.'
                  value: { status: '400', error: '400', messages: { error: 'update method fail.' } }
    delete:
      tags:
        - Product
      description: 'Update someone product by p_key.'
      operationId: 8862bc4537e0e11051d212ae07f16d45
      parameters:
        -
          name: p_key
          in: path
          description: p_key
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Product delete method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                  msg: { type: string, example: 'Product delete method successful.' }
                type: object
        '404':
          description: 'Delete product 404 error'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'The Product key is required'
                  value: { status: '404', error: '404', messages: { error: 'The Product key is required' } }
                string2:
                  summary: 'This product not found'
                  value: { status: '404', error: '404', messages: { error: 'This product not found' } }
  /api/v2/inventory/addInventory:
    post:
      tags:
        - Inventory
      description: 'Add product amount.'
      operationId: d3d01a5767c0ab4f927438badf23f9a6
      requestBody:
        description: 'Request body'
        required: true
        content:
          application/json:
            schema:
              properties:
                p_key:
                  type: integer
                  example: '22'
                addAmount:
                  type: integer
                  example: '10'
              type: object
      responses:
        '200':
          description: 'Product delete method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                  msg: { type: string, example: 'Product delete method successful.' }
                type: object
        '404':
          description: 'Add Inventory 404 error'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'Incoming data not found'
                  value: { status: '404', error: '404', messages: { error: 'Incoming data not found' } }
                string2:
                  summary: 'This product not found'
                  value: { status: '404', error: '404', messages: { error: 'This product not found' } }
        '400':
          description: 'This product amount add fail'
          content:
            application/json:
              schema:
                properties:
                  status: { description: '400', type: string, example: '400' }
                  error: { description: '400', type: string, example: '400' }
                  messages: { properties: { error: { description: 'This product amount add fail', type: string, example: 'This product amount add fail' } }, type: object }
                type: object
  /api/v2/inventory/reduceInventory:
    post:
      tags:
        - Inventory
      description: 'Reduce product amount.'
      operationId: 3fd5d2b84cf21fb19c8531706c48f1c0
      requestBody:
        description: 'Request body'
        required: true
        content:
          application/json:
            schema:
              properties:
                p_key:
                  type: integer
                  example: '22'
                reduceAmount:
                  type: integer
                  example: '10'
              type: object
      responses:
        '200':
          description: 'Product delete method successful.'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                  msg: { type: string, example: 'Product delete method successful.' }
                type: object
        '404':
          description: 'Reduce Inventory 404 error'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'Incoming data not found'
                  value: { status: '404', error: '404', messages: { error: 'Incoming data not found' } }
                string2:
                  summary: 'This product not found'
                  value: { status: '404', error: '404', messages: { error: 'This product not found' } }
        '400':
          description: 'Reduce Inventory 400 error'
          content:
            application/json:
              schema: {  }
              examples:
                string:
                  summary: 'This product amount not enough'
                  value: { status: '400', error: '400', messages: { error: 'This product amount not enough' } }
                string2:
                  summary: 'This product amount reduce fail'
                  value: { status: '400', error: '400', messages: { error: 'This product amount reduce fail' } }
